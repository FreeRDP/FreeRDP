; Proxy configuration file with documented options.
; See FreeRDP sources and wiki for more details:
; - FreeRDP repo (server/proxy implementation): https://github.com/FreeRDP/FreeRDP/tree/master/server/proxy
; - General FreeRDP docs & wiki:             https://github.com/FreeRDP/FreeRDP/wiki
; Use these links to explore implementation details, option names and additional modules.

[Server]
; Host: address the proxy listens on (0.0.0.0 for all interfaces)
; Example: "0.0.0.0" or "127.0.0.1"
Host=0.0.0.0

; Port: TCP port the proxy accepts incoming RDP connections on
; Default RDP port is 3389
Port=3389

[Target]
; Host: backend RDP server hostname or IP to which the proxy will forward traffic
; Use DNS name or IP. If FixedTarget=true the proxy will always connect to this.
Host=test_rdp

; Port: backend RDP server port
Port=3389

; FixedTarget: if true, every incoming session is forwarded to Target.Host:Target.Port
; If false, proxy may allow dynamic/negotiated targets (depending on implementation)
; Values: true | false
FixedTarget=0

; TlsSecLevel: minimum TLS security level to enforce for connections (implementation-specific)
; Lower values = allow weaker ciphers; higher values = stricter security.
; Typical values: 1 (low) .. 3 (high) â€” consult implementation for exact mapping.
TlsSecLevel=1

[Channels]
; These flags enable/disable individual virtual channels between client and target.
; true = channel enabled, false = disabled
GFX=0                ; Graphics pipeline channel (GFX)
DisplayControl=1     ; Display control channel
Clipboard=1          ; Clipboard redirection
AudioInput=1         ; Microphone redirection
AudioOutput=1        ; Audio playback redirection
DeviceRedirection=1  ; Generic device redirection (URBDRC)
VideoRedirection=1   ; Video redirection (e.g., RDPDR/VMR)
CameraRedirection=1  ; Camera redirection
RemoteApp=1          ; RemoteApp session handling (if supported)
; PassthroughIsBlacklist:
;   true  = names in Passthrough are blocked (blacklist)
;   false = names in Passthrough are allowed only (whitelist)
PassthroughIsBlacklist=1

; ; Passthrough: comma-separated list of channel or module names to passthrough/blacklist
; ; Example: "rdpsnd,cliprdr,drive"
; Passthrough=

; ; Intercept: comma-separated list of channels to intercept/handle in proxy (instead of passthrough)
; ; Example: "cliprdr" to let proxy inspect/modify clipboard traffic
; Intercept=

[Input]
; Control which client input devices are forwarded/accepted
Keyboard=1       ; accept keyboard input
Mouse=1          ; accept mouse input
Multitouch=1     ; accept touch/multitouch input

[Security]
; Server* options control what the proxy accepts from incoming client connections
ServerTlsSecurity=1   ; accept TLS (TLS RDP) from client
ServerNlaSecurity=0  ; accept NLA (CredSSP) from client
ServerRdpSecurity=1   ; accept legacy RDP security from client

; Client* options control how the proxy connects to the backend server
ClientTlsSecurity=1   ; use TLS when connecting to target
ClientNlaSecurity=1   ; use NLA (CredSSP) when connecting to target
ClientRdpSecurity=1   ; allow RDP security when connecting to target

; ClientAllowFallbackToTls: if true, allow falling back to TLS when other auth methods fail
ClientAllowFallbackToTls=1

[Plugins]
; Modules: comma-separated list of optional modules to load (module names as in repo/plugins)
; Required: comma-separated list of modules that must be present or fail startup
; See repo/server/proxy and plugins folders for available module names
Modules=demo
Required=demo

[Certificates]
; CertificateFile: absolute path to PEM certificate file used by proxy for TLS (server side)
; PrivateKeyFile: corresponding private key file
; The Docker build generates a self-signed cert at:
;   /etc/freerdp-proxy/certs/cert.pem
;   /etc/freerdp-proxy/certs/privkey.pem
; You can override with your own files or inline contents.
CertificateFile=/etc/freerdp-proxy/certs/cert.pem
PrivateKeyFile=/etc/freerdp-proxy/certs/privkey.pem

; CertificateFile: absolute path to PEM certificate file used by proxy for TLS (server side)
; CertificateContent: alternatively provide PEM contents directly (inlined)
; PrivateKeyFile / PrivateKeyContent: corresponding private key file or inlined key contents
; Note: use either File or Content forms; ensure permissions and formats are correct.
# CertificateFile=<absolute path to some certificate file> OR
# CertificateContent=<Contents of some certificate file in PEM format>
# PrivateKeyFile=<absolute path to some private key file> OR
# PrivateKeyContent=<Contents of some private key file in PEM format>

; Additional notes:
; - To change build-time features (enable/disable channels, modules, or static/shared builds)
;   consult FreeRDP build options described on the FreeRDP Wiki and CMake options:
;   https://github.com/FreeRDP/FreeRDP/wiki/Compilation
; - For channel and module implementation details, check server/proxy sources:
;   https://github.com/FreeRDP/FreeRDP/tree/master/server/proxy
; - For authentication, TLS and OpenSSL behaviour see FreeRDP client/server code and OpenSSL docs:
;   https://www.openssl.org/docs/manmaster/man1/
; - If a CMake configure step fails due to missing system libs (e.g. CUPS), either:
;   * install the corresponding -dev package (libcups2-dev) or
;   * disable the channel that requires it (e.g. -DWITH_CUPS=OFF or -DCHANNEL_PRINTER=OFF)
