// Top-level build file where you can add configuration options common to all sub-projects/modules.
Properties properties = new Properties()
File file = new File('release.properties')
if (file.canRead()) {
    properties.load(new FileInputStream(file))
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def matchResult = { String input ->
    String pattern = "^.?(\\d+)\\.(\\d+)\\.(\\d+)(-(rc|alpha|beta)(\\d+))?";
    java.util.regex.Matcher m = java.util.regex.Pattern.compile(pattern).matcher(input);
    List<String> result = new ArrayList<>();

    if (m.matches()) {
        for (int i=1; i<=m.groupCount(); i++) {
            try {
                String rc = m.group(i);
                result.add(rc);
            } catch(IllegalStateException e) {
                e.printStackTrace();
            }
        }
    }

    String[] array = new String[result.size()];
    return result.toArray(array);
}

def getVersionCode = { ->
    def name = getVersionName()
    String[] result = matchResult(name);
    if (result.length >= 3) {
        int major = Integer.valueOf(result[0]);
        int minor = Integer.valueOf(result[1]);
        int patch = Integer.valueOf(result[2]);
        int type = 3;
        int typeId = 0;

        if (result.length >= 6) {
            if (result[3] != null) {
                if (result[4] != null) {
                    if (result[4].equals("rc")) {
                        type = 2;
                    }
                    if (result[4].equals("beta")) {
                        type = 1;
                    }
                    if (result[4].equals("alpha")) {
                        type = 0;
                    }
                }
                if (result[5] != null) {
                    typeId = Integer.valueOf(result[5]);
                }
            }
        }

        return (major * 10000 + minor * 100 + patch) * 1000 + type * 100 + typeId;
    } else {
        return 1;
    }
}

ext {
    versionCode = properties.get('VERSION', String.valueOf(getVersionCode())).toInteger()
    minSdk = properties.get('MIN_SDK', "14").toInteger()
    targetSdk = properties.get('TARGET_SDK', "25").toInteger()
    compileSdk = properties.get('COMPILE_SDK', "25").toInteger()
    buildToolsVersion = properties.get('BUILD_TOOLS', "25.0.2")
    versionCode = properties.get('VERSION_NAME', getVersionCode())
    versionName = properties.get('VERSION_NAME', getVersionName())

    println '----------------- Project configuration -------------------'
    println 'VERSION:            ' + versionCode
    println 'MIN_SDK:            ' + minSdk
    println 'TARGET_SDK:         ' + targetSdk
    println 'COMPILE_SDK:        ' + compileSdk
    println 'BUILD_TOOLS:        ' + buildToolsVersion
    println 'VERSION_NAME:       ' + versionName
    println 'RELEASE_STORE_FILE: '+ RELEASE_STORE_FILE
    println 'RELEASE_KEY_ALIAS:  '+ RELEASE_KEY_ALIAS
    println '-----------------------------------------------------------'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
