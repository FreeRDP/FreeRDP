# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  workflow_dispatch:
    branches: [ master, stable* ]
  push:
    branches: [ "master", "stable*" ]
  pull_request:
    branches: [ "master", "stable*" ]
  schedule:
    - cron: '41 2 * * 2'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      run: |
        sudo apt update
        sudo apt install \
          libxrandr-dev \
          libxinerama-dev \
          libusb-1.0-0-dev \
          xserver-xorg-dev \
          libswscale-dev \
          libswresample-dev \
          libavutil-dev \
          libavcodec-dev \
          libcups2-dev \
          libv4l-dev \
          libpulse-dev \
          libasound2-dev \
          libpcsclite-dev \
          xsltproc \
          libxcb-cursor-dev \
          libxcursor-dev \
          libcairo2-dev \
          libfaac-dev \
          libfaad-dev \
          libjpeg-dev \
          libgsm1-dev \
          ninja-build \
          libxfixes-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libpam0g-dev \
          libxdamage-dev \
          libxcb-damage0-dev \
          ccache \
          libxtst-dev \
          libfuse3-dev \
          libsystemd-dev \
          libcairo2-dev \
          libsoxr-dev \
          libsdl2-dev \
          docbook-xsl \
          libkrb5-dev \
          libcjson-dev \
          libsdl2-ttf-dev \
          libsdl2-image-dev \
          libwebkit2gtk-4.0-dev \
          clang \
          libopus-dev \
          libwebp-dev \
          libpng-dev \
          libjpeg-dev \
          liburiparser-dev
        mkdir ci-build
        cd ci-build
        export CC=/usr/bin/clang
        export CXX=/usr/bin/clang++
        export CFLAGS="-Weverything"
        export CXXFLAGS="-Weverything"
        cmake -GNinja ../ci/cmake-preloads/config-linux-all.txt ..
        cmake --build .

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
